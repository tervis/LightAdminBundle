{"mappings":"A,C,KEIA,SAAS,IACL,OAAO,aAAa,OAAO,CAAC,QAChC,CAMA,SAAS,IACL,IAAM,EAAc,WACpB,AAAI,GAGG,CAAA,OAAO,UAAU,CAAC,gCAAgC,OAAO,CAAG,OAAS,OAA5E,CACJ,CAEA,SAAS,EAAS,CAAK,EACf,AAAU,SAAV,EACA,SAAS,eAAe,CAAC,YAAY,CAAC,gBAAkB,OAAO,UAAU,CAAC,gCAAgC,OAAO,CAAG,OAAS,SAE7H,SAAS,eAAe,CAAC,YAAY,CAAC,gBAAiB,EAE/D,CAEA,SAAS,EAAgB,CAAK,CAAE,EAAQ,CAAA,CAAK,EACzC,IAAM,EAAgB,SAAS,aAAa,CAAC,aAE7C,GAAI,CAAC,EACD,OAGJ,IAAM,EAAoB,SAAS,aAAa,CAAC,kBAC3C,EAAkB,SAAS,aAAa,CAAC,0BACzC,EAAc,SAAS,aAAa,CAAC,CAAC,sBAAsB,EAAE,EAAM,EAAE,CAAC,EAG7E,GAAI,CAAC,EAAa,YACd,QAAQ,IAAI,CAAC,CAAC,+BAA+B,EAAE,EAAM,YAAY,CAAC,EAGtE,IAAM,EAAiB,EAAY,aAAa,CAAC,YAAY,aAAa,QAc1E,GAZA,SAAS,gBAAgB,CAAC,yBAAyB,OAAO,CAAC,AAAA,IACvD,EAAQ,SAAS,CAAC,MAAM,CAAC,UACzB,EAAQ,YAAY,CAAC,eAAgB,QACzC,GAEA,EAAY,SAAS,CAAC,GAAG,CAAC,UAC1B,EAAY,YAAY,CAAC,eAAgB,QAErC,GAAmB,GACnB,EAAgB,YAAY,CAAC,OAAQ,GAGrC,EAAmB,CACnB,IAAM,EAAqB,CAAA,EAAG,EAAkB,WAAW,CAAC,EAAE,EAAE,EAAY,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CACnG,EAAc,YAAY,CAAC,aAAc,EAC7C,CAGI,GACA,EAAc,KAAK,EAE3B,CClEe,MADf,EAEI,YAAY,CAAK,CAAE,CACf,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,SAAU,IAAI,CAAC,CAAA,CAAiB,CAAC,IAAI,CAAC,IAAI,EAC1E,CAEA,CAAA,CAAiB,GACb,IAAI,EAAO,IAAI,CAAC,KAAK,CAEjB,EAAY,EAAK,OAAO,CAAC,KAAK,CAalC,MAZe,EAAK,OAAO,CAAC,SAAS,CAYrB,CACZ,OAAQ,OACR,KAAM,OACN,KAAM,KAAK,SAAS,CAAC,CACjB,aAfW,EAAK,OAAO,CAAC,YAAY,CAgBpC,OAAQ,CACZ,GACA,QAhBU,CACN,YAAe,cACf,eAAgB,mBAChB,OAAU,mBACV,mBAAoB,iBAEpB,eAAgB,CACxB,CAUA,GACC,IAAI,CAAC,AAAC,IAEP,GAEC,KAAK,CAAC,IAAM,IAAI,CAAC,CAAA,CAAa,GACnC,CAGA,CAAA,CAAa,GACT,IAAI,CAAC,KAAK,CAAC,OAAO,CAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CACxC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAG,CAAA,EACtB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,gBAAgB,SAAS,CAAC,GAAG,CAAC,WACrD,CACJ,CCzCO,eAAe,EAAkB,CAAK,EACzC,EAAM,cAAc,GAGpB,IAAM,EAAe,EAAM,aAAa,CAClC,EAAM,EAAa,OAAO,CAAC,GAAG,CAC9B,EAAY,EAAa,OAAO,CAAC,SAAS,CAGhD,GAAI,CAAC,GAAO,CAAC,EAAW,CACpB,QAAQ,KAAK,CAAC,0EACd,MAAM,wDACN,MACJ,CAEA,IAAI,EAAM,SAAS,gBAAgB,CAAC,0BAChC,EAAU,EAAE,CAUhB,GARI,GACA,MAAM,IAAI,CAAC,GAAK,OAAO,CAAC,AAAA,IAChB,EAAG,OAAO,EACV,EAAQ,IAAI,CAAC,EAAG,KAAK,CAE7B,GAGA,AAAmB,IAAnB,EAAQ,MAAM,CAAQ,YACtB,MAAM,8CAIV,GAAK,QAAQ,uDAKb,GAAI,CACA,IAAM,EAAW,MAAM,MAAM,EAAK,CAC9B,OAAQ,OACR,QAAS,CACL,eAAgB,mBAChB,OAAU,mBAEV,eAAgB,CACpB,EACA,KAAM,KAAK,SAAS,CAAC,CACjB,MAAO,EACP,OAAQ,CACZ,EACJ,GAEA,GAAI,EAAS,EAAE,CACX,QAAQ,GAAG,CAAC,2BAA4B,GACxC,OAAO,QAAQ,CAAC,MAAM,OACnB,CACH,IAAM,EAAY,MAAM,EAAS,IAAI,GACrC,QAAQ,KAAK,CAAC,uBAAwB,GACtC,MAAM,CAAC,iBAAiB,EAAE,EAAU,OAAO,EAAI,gBAAA,CAAiB,CACpE,CACJ,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,oDAAqD,GACnE,MAAM,8CACV,CACJ,CH7DA,SAAS,gBAAgB,CAAC,mBAAoB,WAG1C,IAAM,EAAkB,SAAS,cAAc,CAAC,mBAC1C,EAAU,SAAS,cAAc,CAAC,WAClC,EAAO,SAAS,aAAa,CAAC,QAS9B,EAAgB,IAAM,OAAO,UAAU,CANb,IAW1B,EAAqB,KACnB,GAAW,IACP,KAEA,EAAQ,SAAS,CAAC,GAAG,CAAC,UACtB,EAAK,SAAS,CAAC,GAAG,CAAC,YAGnB,EAAQ,SAAS,CAAC,MAAM,CAAC,UACzB,EAAK,SAAS,CAAC,MAAM,CAAC,WAGlC,EAGA,IAGA,OAAO,gBAAgB,CAAC,SAAU,GAE9B,GAAmB,GAAW,GAC9B,EAAgB,gBAAgB,CAAC,QAAS,KAEtC,EAAQ,SAAS,CAAC,MAAM,CAAC,UACzB,EAAK,SAAS,CAAC,MAAM,CAAC,SAC1B,GAIJ,SAAS,gBAAgB,CAAC,wDAAwD,OAAO,CAAC,AAAA,IACtF,GAAI,CACA,IAAI,EAAa,EACrB,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,mCAAoC,EACtD,CACJ,GAGA,IAAM,EAAoB,SAAS,cAAc,CAAC,oBAC9C,CAAA,GACA,EAAkB,gBAAgB,CAAC,QAAS,GCMhD,IAAM,EAAiB,IACvB,EAAS,GACT,EAAgB,EAAgB,CAAA,GAEhC,OAAO,UAAU,CAAC,gCAAgC,gBAAgB,CAAC,SAAU,KACzE,IAAM,EAAc,GACA,CAAA,UAAhB,GAA2B,AAAgB,SAAhB,IAC3B,EAAS,KACT,EAAgB,IAAqB,CAAA,GAE7C,GAEA,SAAS,gBAAgB,CAAC,yBAAyB,OAAO,CAAC,AAAA,IACvD,EAAO,gBAAgB,CAAC,QAAS,KAC7B,IAAM,EAAQ,EAAO,YAAY,CAAC,uBA5E1C,aAAa,OAAO,CAAC,QA6EE,GACf,EAAS,GACT,EAAgB,EAAO,CAAA,EAC3B,EACJ,EDnBJ,E,C","sources":["<anon>","src/light-admin.js","src/js/theme-switch.js","src/js/toggle-switch.js","src/js/batch-delete.js"],"sourcesContent":["(() => {\n/** LightAdminBundle */ // theme-switch.js (or directly in your HTML <script> tags)\n// Helper functions\nfunction $e511092f8d54c1b9$var$getStoredTheme() {\n    return localStorage.getItem('theme');\n}\nfunction $e511092f8d54c1b9$var$setStoredTheme(theme) {\n    localStorage.setItem('theme', theme);\n}\nfunction $e511092f8d54c1b9$var$getPreferredTheme() {\n    const storedTheme = $e511092f8d54c1b9$var$getStoredTheme();\n    if (storedTheme) return storedTheme;\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n}\nfunction $e511092f8d54c1b9$var$setTheme(theme) {\n    if (theme === 'auto') document.documentElement.setAttribute('data-bs-theme', window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');\n    else document.documentElement.setAttribute('data-bs-theme', theme);\n}\nfunction $e511092f8d54c1b9$var$showActiveTheme(theme, focus = false) {\n    const themeSwitcher = document.querySelector('#bd-theme');\n    if (!themeSwitcher) return;\n    const themeSwitcherText = document.querySelector('#bd-theme-text');\n    const activeThemeIcon = document.querySelector('.theme-icon-active use');\n    const btnToActive = document.querySelector(`[data-bs-theme-value=\"${theme}\"]`);\n    // Check if the button for the active theme exists before proceeding\n    if (!btnToActive) {\n        console.warn(`Theme switch button for value \"${theme}\" not found.`);\n        return;\n    }\n    const svgOfActiveBtn = btnToActive.querySelector('svg use')?.getAttribute('href');\n    document.querySelectorAll('[data-bs-theme-value]').forEach((element)=>{\n        element.classList.remove('active');\n        element.setAttribute('aria-pressed', 'false');\n    });\n    btnToActive.classList.add('active');\n    btnToActive.setAttribute('aria-pressed', 'true');\n    if (activeThemeIcon && svgOfActiveBtn) activeThemeIcon.setAttribute('href', svgOfActiveBtn);\n    if (themeSwitcherText) {\n        const themeSwitcherLabel = `${themeSwitcherText.textContent} (${btnToActive.dataset.bsThemeValue})`;\n        themeSwitcher.setAttribute('aria-label', themeSwitcherLabel);\n    }\n    if (focus) themeSwitcher.focus();\n}\nfunction $e511092f8d54c1b9$export$c87210e9a8c63584() {\n    const preferredTheme = $e511092f8d54c1b9$var$getPreferredTheme();\n    $e511092f8d54c1b9$var$setTheme(preferredTheme);\n    $e511092f8d54c1b9$var$showActiveTheme(preferredTheme, false);\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', ()=>{\n        const storedTheme = $e511092f8d54c1b9$var$getStoredTheme();\n        if (storedTheme !== 'light' && storedTheme !== 'dark') {\n            $e511092f8d54c1b9$var$setTheme($e511092f8d54c1b9$var$getPreferredTheme());\n            $e511092f8d54c1b9$var$showActiveTheme($e511092f8d54c1b9$var$getPreferredTheme(), false);\n        }\n    });\n    document.querySelectorAll('[data-bs-theme-value]').forEach((toggle)=>{\n        toggle.addEventListener('click', ()=>{\n            const theme = toggle.getAttribute('data-bs-theme-value');\n            $e511092f8d54c1b9$var$setStoredTheme(theme);\n            $e511092f8d54c1b9$var$setTheme(theme);\n            $e511092f8d54c1b9$var$showActiveTheme(theme, true);\n        });\n    });\n}\n\n\n/** LightAdminBundle/assets/scripts/toggle-switch.js */ class $636a8839dac886f7$export$2e2bcd8739ae039 {\n    constructor(field){\n        this.field = field;\n        this.field.addEventListener('change', this.#updateFieldValue.bind(this));\n    }\n    #updateFieldValue() {\n        let elem = this.field;\n        let csrfToken = elem.dataset.token;\n        let urlValue = elem.dataset.toggleUrl;\n        let propertyName = elem.dataset.propertyName;\n        let options = {\n            'credentials': 'same-origin',\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            'X-Requested-With': 'XMLHttpRequest',\n            // Potentially add the CSRF token to headers if your backend expects it there\n            'X-CSRF-Token': csrfToken\n        };\n        fetch(urlValue, {\n            method: \"POST\",\n            mode: 'cors',\n            body: JSON.stringify({\n                propertyName: propertyName,\n                _token: csrfToken\n            }),\n            headers: options\n        }).then((response)=>{\n        //console.log(response);\n        })//.then(() => { /* do nothing else when the toggle request is successful */ })\n        .catch(()=>this.#disableField());\n    }\n    // used in case of error, to restore the original toggle field value and disable it\n    #disableField() {\n        this.field.checked = !this.field.checked;\n        this.field.disabled = true;\n        this.field.closest('.form-switch').classList.add('disabled');\n    }\n}\n\n\n/** LightAdminBundle/assets/scripts/batch-delete.js */ /**\n * Function to handle the batch delete process\n */ async function $87c9082ea6486925$export$889c79f16c2d106b(event) {\n    event.preventDefault(); // Prevent default form submission or link navigation\n    // Get the delete button that triggered the event to extract data attributes\n    const deleteButton = event.currentTarget;\n    const url = deleteButton.dataset.url; // Get URL from data-url attribute\n    const csrfToken = deleteButton.dataset.csrfToken; // Get CSRF token from data-csrf-token\n    // Check if URL and CSRF token are available\n    if (!url || !csrfToken) {\n        console.error('Batch Delete: Missing URL or CSRF Token data attributes on the button.');\n        alert('Deletion cannot proceed: Missing configuration data.');\n        return;\n    }\n    let els = document.querySelectorAll('.batch-delete-checkbox'); // Use a more specific class for checkboxes\n    let carrier = [];\n    if (els) Array.from(els).forEach((el)=>{\n        if (el.checked) carrier.push(el.value);\n    });\n    if (carrier.length === 0) {\n        alert('Please select at least one item to delete.');\n        return;\n    }\n    if (!confirm('Are you sure you want to delete the selected items?')) return; // User cancelled the operation\n    // Send the carrier array to the server\n    try {\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                // Potentially add the CSRF token to headers if your backend expects it there\n                'X-CSRF-Token': csrfToken\n            },\n            body: JSON.stringify({\n                items: carrier,\n                _token: csrfToken\n            })\n        });\n        if (response.ok) {\n            console.log('Batch delete successful:', response);\n            window.location.reload(); // Refresh the page after successful deletion\n        } else {\n            const errorData = await response.json();\n            console.error('Batch delete failed:', errorData);\n            alert(`Deletion failed: ${errorData.message || 'Unknown error'}`);\n        }\n    } catch (error) {\n        console.error('Network or client-side error during batch delete:', error);\n        alert('A network error occurred. Please try again.');\n    }\n}\n\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // --- Sidebar Collapse Logic ---\n    const sidebarCollapse = document.getElementById('sidebarCollapse');\n    const sidebar = document.getElementById('sidebar');\n    const body = document.querySelector('body');\n    // Define the breakpoint for small screens (should match CSS breakpoint)\n    const SMALL_SCREEN_BREAKPOINT = 768;\n    /**\n     * Checks if the current screen width is considered a small screen.\n     * @returns {boolean} True if it's a small screen, false otherwise.\n     */ const isSmallScreen = ()=>window.innerWidth < SMALL_SCREEN_BREAKPOINT;\n    /**\n     * Updates the sidebar and body classes based on screen size.\n     */ const updateSidebarState = ()=>{\n        if (sidebar && body) {\n            if (isSmallScreen()) {\n                // If on a small screen, ensure sidebar is collapsed\n                sidebar.classList.add('active');\n                body.classList.add('active');\n            } else {\n                // If on a large screen, ensure sidebar is expanded (or remove collapse classes)\n                sidebar.classList.remove('active');\n                body.classList.remove('active');\n            }\n        }\n    };\n    // Initial state setup on page load\n    updateSidebarState();\n    // Add resize listener to update sidebar state dynamically\n    window.addEventListener('resize', updateSidebarState);\n    if (sidebarCollapse && sidebar && body) sidebarCollapse.addEventListener('click', ()=>{\n        //console.log('Toggling sidebar and body classes.');\n        sidebar.classList.toggle('active');\n        body.classList.toggle('active');\n    });\n    // --- Toggle Switches Initialization ---\n    document.querySelectorAll('td.field-boolean .form-switch input[type=\"checkbox\"]').forEach((toggleField)=>{\n        try {\n            new (0, $636a8839dac886f7$export$2e2bcd8739ae039)(toggleField);\n        } catch (error) {\n            console.error('Error initializing ToggleSwitch:', error);\n        }\n    });\n    // --- Batch Delete Button Listener ---\n    const batchDeleteButton = document.getElementById('batchDeleteButton');\n    if (batchDeleteButton) batchDeleteButton.addEventListener('click', (0, $87c9082ea6486925$export$889c79f16c2d106b));\n    // --- Theme Switcher Initialization ---\n    (0, $e511092f8d54c1b9$export$c87210e9a8c63584)(); // Call the theme switch initialization\n});\n\n})();\n//# sourceMappingURL=light-admin.js.map\n","/** LightAdminBundle */\nimport { initThemeSwitch } from './js/theme-switch.js';\nimport ToggleSwitch from './js/toggle-switch.js';\nimport { handleBatchDelete } from './js/batch-delete.js';\n\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    \n    // --- Sidebar Collapse Logic ---\n    const sidebarCollapse = document.getElementById('sidebarCollapse');\n    const sidebar = document.getElementById('sidebar');\n    const body = document.querySelector('body');\n\n    // Define the breakpoint for small screens (should match CSS breakpoint)\n    const SMALL_SCREEN_BREAKPOINT = 768;\n\n    /**\n     * Checks if the current screen width is considered a small screen.\n     * @returns {boolean} True if it's a small screen, false otherwise.\n     */\n    const isSmallScreen = () => window.innerWidth < SMALL_SCREEN_BREAKPOINT;\n\n    /**\n     * Updates the sidebar and body classes based on screen size.\n     */\n    const updateSidebarState = () => {\n        if (sidebar && body) {\n            if (isSmallScreen()) {\n                // If on a small screen, ensure sidebar is collapsed\n                sidebar.classList.add('active');\n                body.classList.add('active');\n            } else {\n                // If on a large screen, ensure sidebar is expanded (or remove collapse classes)\n                sidebar.classList.remove('active');\n                body.classList.remove('active');\n            }\n        }\n    };\n\n    // Initial state setup on page load\n    updateSidebarState();\n\n    // Add resize listener to update sidebar state dynamically\n    window.addEventListener('resize', updateSidebarState);\n\n    if (sidebarCollapse && sidebar && body) {\n        sidebarCollapse.addEventListener('click', () => {\n            //console.log('Toggling sidebar and body classes.');\n            sidebar.classList.toggle('active');\n            body.classList.toggle('active');\n        });\n    }\n\n    // --- Toggle Switches Initialization ---\n    document.querySelectorAll('td.field-boolean .form-switch input[type=\"checkbox\"]').forEach(toggleField => {\n        try {\n            new ToggleSwitch(toggleField);\n        } catch (error) {\n            console.error('Error initializing ToggleSwitch:', error);\n        }\n    });\n\n    // --- Batch Delete Button Listener ---\n    const batchDeleteButton = document.getElementById('batchDeleteButton');\n    if (batchDeleteButton) {\n        batchDeleteButton.addEventListener('click', handleBatchDelete);\n    }\n\n    // --- Theme Switcher Initialization ---\n    initThemeSwitch(); // Call the theme switch initialization\n\n});","// theme-switch.js (or directly in your HTML <script> tags)\n\n\n// Helper functions\nfunction getStoredTheme() {\n    return localStorage.getItem('theme');\n}\n\nfunction setStoredTheme(theme) {\n    localStorage.setItem('theme', theme);\n}\n\nfunction getPreferredTheme() {\n    const storedTheme = getStoredTheme();\n    if (storedTheme) {\n        return storedTheme;\n    }\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n}\n\nfunction setTheme(theme) {\n    if (theme === 'auto') {\n        document.documentElement.setAttribute('data-bs-theme', (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'));\n    } else {\n        document.documentElement.setAttribute('data-bs-theme', theme);\n    }\n}\n\nfunction showActiveTheme(theme, focus = false) {\n    const themeSwitcher = document.querySelector('#bd-theme');\n\n    if (!themeSwitcher) {\n        return;\n    }\n\n    const themeSwitcherText = document.querySelector('#bd-theme-text');\n    const activeThemeIcon = document.querySelector('.theme-icon-active use');\n    const btnToActive = document.querySelector(`[data-bs-theme-value=\"${theme}\"]`);\n\n    // Check if the button for the active theme exists before proceeding\n    if (!btnToActive) {\n        console.warn(`Theme switch button for value \"${theme}\" not found.`);\n        return;\n    }\n    const svgOfActiveBtn = btnToActive.querySelector('svg use')?.getAttribute('href');\n\n    document.querySelectorAll('[data-bs-theme-value]').forEach(element => {\n        element.classList.remove('active');\n        element.setAttribute('aria-pressed', 'false');\n    });\n\n    btnToActive.classList.add('active');\n    btnToActive.setAttribute('aria-pressed', 'true');\n\n    if (activeThemeIcon && svgOfActiveBtn) {\n        activeThemeIcon.setAttribute('href', svgOfActiveBtn);\n    }\n\n    if (themeSwitcherText) {\n        const themeSwitcherLabel = `${themeSwitcherText.textContent} (${btnToActive.dataset.bsThemeValue})`;\n        themeSwitcher.setAttribute('aria-label', themeSwitcherLabel);\n    }\n\n\n    if (focus) {\n        themeSwitcher.focus();\n    }\n}\n\n\nexport function initThemeSwitch() {\n    const preferredTheme = getPreferredTheme();\n    setTheme(preferredTheme);\n    showActiveTheme(preferredTheme, false);\n\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {\n        const storedTheme = getStoredTheme();\n        if (storedTheme !== 'light' && storedTheme !== 'dark') {\n            setTheme(getPreferredTheme());\n            showActiveTheme(getPreferredTheme(), false);\n        }\n    });\n\n    document.querySelectorAll('[data-bs-theme-value]').forEach(toggle => {\n        toggle.addEventListener('click', () => {\n            const theme = toggle.getAttribute('data-bs-theme-value');\n            setStoredTheme(theme);\n            setTheme(theme);\n            showActiveTheme(theme, true);\n        });\n    });\n}","/** LightAdminBundle/assets/scripts/toggle-switch.js */\nexport default class ToggleSwitch {\n    constructor(field) {\n        this.field = field;\n        this.field.addEventListener('change', this.#updateFieldValue.bind(this));\n    }\n\n    #updateFieldValue() {\n        let elem = this.field;\n\n        let csrfToken = elem.dataset.token;\n        let urlValue = elem.dataset.toggleUrl;\n        let propertyName = elem.dataset.propertyName\n\n        let options = {\n                'credentials': 'same-origin',\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'X-Requested-With': 'XMLHttpRequest',\n                // Potentially add the CSRF token to headers if your backend expects it there\n                'X-CSRF-Token': csrfToken,\n        };\n\n        fetch(urlValue, {\n            method: \"POST\",\n            mode: 'cors',\n            body: JSON.stringify({\n                propertyName: propertyName,\n                _token: csrfToken, // Include the CSRF token in the body as well\n            }),\n            headers: options,\n        })\n        .then((response) => {\n            //console.log(response);\n        })\n        //.then(() => { /* do nothing else when the toggle request is successful */ })\n        .catch(() => this.#disableField());\n    }\n\n    // used in case of error, to restore the original toggle field value and disable it\n    #disableField() {\n        this.field.checked = !this.field.checked;\n        this.field.disabled = true;\n        this.field.closest('.form-switch').classList.add('disabled');\n    }\n}\n","/** LightAdminBundle/assets/scripts/batch-delete.js */\n/**\n * Function to handle the batch delete process\n */\nexport async function handleBatchDelete(event) {\n    event.preventDefault(); // Prevent default form submission or link navigation\n\n    // Get the delete button that triggered the event to extract data attributes\n    const deleteButton = event.currentTarget;\n    const url = deleteButton.dataset.url; // Get URL from data-url attribute\n    const csrfToken = deleteButton.dataset.csrfToken; // Get CSRF token from data-csrf-token\n\n    // Check if URL and CSRF token are available\n    if (!url || !csrfToken) {\n        console.error('Batch Delete: Missing URL or CSRF Token data attributes on the button.');\n        alert('Deletion cannot proceed: Missing configuration data.');\n        return;\n    }\n\n    let els = document.querySelectorAll('.batch-delete-checkbox'); // Use a more specific class for checkboxes\n    let carrier = [];\n\n    if (els) {\n        Array.from(els).forEach(el => {\n            if (el.checked) {\n                carrier.push(el.value);\n            }\n        });\n    }\n\n    if (carrier.length === 0) {\n        alert('Please select at least one item to delete.');\n        return;\n    }\n\n    if (!confirm('Are you sure you want to delete the selected items?')) {\n        return; // User cancelled the operation\n    }\n\n    // Send the carrier array to the server\n    try {\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                // Potentially add the CSRF token to headers if your backend expects it there\n                'X-CSRF-Token': csrfToken,\n            },\n            body: JSON.stringify({\n                items: carrier,\n                _token: csrfToken, // Include the CSRF token in the body as well\n            }),\n        });\n\n        if (response.ok) {\n            console.log('Batch delete successful:', response);\n            window.location.reload(); // Refresh the page after successful deletion\n        } else {\n            const errorData = await response.json();\n            console.error('Batch delete failed:', errorData);\n            alert(`Deletion failed: ${errorData.message || 'Unknown error'}`);\n        }\n    } catch (error) {\n        console.error('Network or client-side error during batch delete:', error);\n        alert('A network error occurred. Please try again.');\n    }\n}"],"names":["$e511092f8d54c1b9$var$getStoredTheme","localStorage","getItem","$e511092f8d54c1b9$var$getPreferredTheme","storedTheme","window","matchMedia","matches","$e511092f8d54c1b9$var$setTheme","theme","document","documentElement","setAttribute","$e511092f8d54c1b9$var$showActiveTheme","focus","themeSwitcher","querySelector","themeSwitcherText","activeThemeIcon","btnToActive","console","warn","svgOfActiveBtn","getAttribute","querySelectorAll","forEach","element","classList","remove","add","themeSwitcherLabel","textContent","dataset","bsThemeValue","$636a8839dac886f7$export$2e2bcd8739ae039","constructor","field","addEventListener","bind","elem","csrfToken","token","fetch","toggleUrl","method","mode","body","JSON","stringify","propertyName","_token","headers","then","response","catch","checked","disabled","closest","$87c9082ea6486925$export$889c79f16c2d106b","event","preventDefault","deleteButton","currentTarget","url","error","alert","els","carrier","Array","from","el","push","value","length","confirm","items","ok","log","location","reload","errorData","json","message","sidebarCollapse","getElementById","sidebar","isSmallScreen","innerWidth","updateSidebarState","toggle","toggleField","batchDeleteButton","preferredTheme","setItem"],"version":3,"file":"light-admin.js.map"}